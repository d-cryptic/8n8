generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  name       String?
  password   String?
  googleId   String?  @unique
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  workflows   Workflow[]
  credentials Credential[]
  executions  Execution[]
  Webhook     Webhook[]

  @@map("users")
}

model Workflow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  enabled     Boolean  @default(true)
  nodes       Json // ReactFlow nodes data
  connections Json // ReactFlow edges/connections data
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  webhooks   Webhook[]
  executions Execution[]

  @@map("workflows")
}

model Webhook {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  method     String // GET, POST, PUT, DELETE, etc.
  path       String   @unique // e.g., /webhook/123
  header     String? // Authentication header
  secret     String? // Webhook secret for verification
  workflowId String   @db.ObjectId
  userId     String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

model Credential {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  platform  String // telegram, email, etc.
  data      Json // Platform-specific credential data
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credentials")
}

model Execution {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  workflowId  String    @db.ObjectId
  userId      String    @db.ObjectId
  status      String // pending, running, completed, failed
  tasksDone   String // e.g., "3/5"
  result      Json? // Execution result data
  error       String? // Error message if failed
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("executions")
}

model OtpToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("otp_tokens")
}
